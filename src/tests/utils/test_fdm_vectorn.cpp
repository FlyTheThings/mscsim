#include <iostream>

#include <QString>
#include <QtTest>

#include <fdm/utils/fdm_VectorN.h>

////////////////////////////////////////////////////////////////////////////////

using namespace std;

////////////////////////////////////////////////////////////////////////////////

class VectorNTest : public QObject
{
    Q_OBJECT

public:

    VectorNTest();

private Q_SLOTS:

    void initTestCase();
    void cleanupTestCase();

    void constructor();
    void getLength();
    void getNormalized();

    void set();

    void operator_assign();
    void operator_add();
    void operator_negation();
    void operator_substract();
    void operator_multiply_by_scalar();
    void operator_divide_by_scalar();
    void operator_unary_add();
    void operator_unary_substract();
    void operator_unary_multiply_by_scalar();
    void operator_unary_divide_by_scalar();
    void operator_unary_vector_cross_product();
};

////////////////////////////////////////////////////////////////////////////////

VectorNTest::VectorNTest() {}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::initTestCase() {}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::cleanupTestCase() {}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::constructor()
{
    fdm::VectorN v1( 3 );

    QVERIFY2( fabs( v1( 0 ) - 0.0 ) < 1.0e-9, "Failure 0 v1" );
    QVERIFY2( fabs( v1( 1 ) - 0.0 ) < 1.0e-9, "Failure 1 v1" );
    QVERIFY2( fabs( v1( 2 ) - 0.0 ) < 1.0e-9, "Failure 2 v1" );
    QVERIFY2( v1.getSize() == 3, "Failure getSize v1" );

    v1( 0 ) = 1.0;
    v1( 1 ) = 2.0;
    v1( 2 ) = 3.0;

    fdm::VectorN v2( v1 );

    QVERIFY2( fabs( v2( 0 ) - 1.0 ) < 1.0e-9, "Failure 0 v2" );
    QVERIFY2( fabs( v2( 1 ) - 2.0 ) < 1.0e-9, "Failure 1 v2" );
    QVERIFY2( fabs( v2( 2 ) - 3.0 ) < 1.0e-9, "Failure 2 v2" );
    QVERIFY2( v2.getSize() == 3, "Failure getSize v2" );

}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::getLength()
{

}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::getNormalized()
{

}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::set()
{

}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::operator_assign()
{

}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::operator_add()
{

}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::operator_negation()
{

}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::operator_substract()
{

}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::operator_multiply_by_scalar()
{

}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::operator_divide_by_scalar()
{

}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::operator_vector_dot_product()
{

}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::operator_vector_cross_product()
{

}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::operator_unary_add() {}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::operator_unary_substract() {}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::operator_unary_multiply_by_scalar() {}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::operator_unary_divide_by_scalar() {}

////////////////////////////////////////////////////////////////////////////////

void VectorNTest::operator_unary_vector_cross_product() {}

////////////////////////////////////////////////////////////////////////////////

QTEST_APPLESS_MAIN(VectorNTest)

////////////////////////////////////////////////////////////////////////////////

#include "test_fdm_vectorn.moc"
